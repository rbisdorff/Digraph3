#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Python implementation of digraphs
# Current revision $Revision$
# Copyright (C) 2006-2008  Raymond Bisdorff
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#######################
from digraphs import *
from outrankingDigraphs import *
from sortingDigraphs import *
from weakOrders import *

class SortingDigraph(BipolarOutrankingDigraph,PerformanceTableau):
    """
    Specialisation of the digraphs.BipolarOutrankingDigraph Class
    for Condorcet based multicriteria sorting of alternatives.

    Besides a valid PerformanceTableau instance we require a sorting profile,
    i.e.:

         * a dictionary <categories> of categories with 'name', 'order' and 'comment'
         * a dictionary <criteriaCategoryLimits> with double entry:

               [criteriakey][categoryKey] containing a ['minimum'] and
               a  ['maximum'] value in the scale of the criterion
               respecting the order of the categories.

    Template of required data::

        self.categories = {'c01': { 'name': 'week','order': 0,
                                    'comment': 'lowest category',},
                           'c02': { 'name': 'ok','order': 1,
                                    'comment': 'medium category',},
                           'c03': { 'name': 'good','order': 2,
                                    'comment': 'highest category',},
                           'c04': { 'name': 'excellent','order': 3,
                                    'comment': 'highest category',},
        }
        self.criteriaCategoryLimits['lowerClosed'] = True # default
        self.criteriaCategoryLimits[g] = {
                'c01': {'minimum':0, 'maximum':25},
                'c02': {'minimum':25, 'maximum':50},
                'c03': {'minimum':50, 'maximum':75},
                'c04': {'minimum':75, 'maximum':120},
         }

    A template named tempProfile.py is providied in the digraphs module distribution.
        
    .. note::

        We generally require a performanceTableau instance and a filename
        where categories and a profile my be read from. If no such filename is given,
        then a default profile with five, equally spaced, categories is used
        on each criteria. By default lower-closed limts of categories are
        supposed to be used in the sorting.If no performance tableau instance is given,
        a standard random instance with 10 actions and 13 criteria is generated by default.

    Example Python3 session

    >>> from sortingDigraphs import SortingDigraph
    >>> s = SortingDigraph() %% Based on a random performance tableau 
    >>> [x for x in s.actions]
    ['a07', 'a06', 'a05', 'a04', 'a03', 'a02', 'a01', 'a10', 'a09', 'a08']
    >>> s.showSorting()
    *--- Sorting results in descending order ---*
    ]> - 100]:   []
    ]100 - 80]:  ['a03', 'a09']
    ]80 - 60]:   ['a02', 'a04', 'a05', 'a06', 'a07', 'a08']
    ]60 - 40]:   ['a01', 'a10']
    ]40 - 20]: 	 []
    ]20 - 0]:    []
    >>> s.showSortingCharacteristics('a10')
    x  in  K_k	  r(x >= m_k)	r(x < M_k)  r(x in K_k)
    a10 in [0-20[    100.00	 -85.98	      -85.98
    a10 in [20-40[    85.98	 -49.53	      -49.53
    a10 in [40-60[    49.53	  20.56	       20.56
    a10 in [60-80[   -20.56	  34.58	      -20.56
    a10 in [80-100[  -34.58	 100.00	      -34.58
    a10 in [100-<[  -100.00	 100.00	     -100.00
    >>> from outrankingDigraphs import BipolarOutrankingDigraph
    >>> g = BipolarOutrankingDigraph(s)
    >>> g.computeOrdinalCorrelation(s)
    {'determination': Decimal('0.2438213914849428868120456904'),
    'MedianCut': False,
    'correlation': Decimal('0.6482112436115843270868824533')}
    >>> 
    

    """

    def __init__(self,argPerfTab=None,
                 argProfile=None,
                 scaleSteps=5,
                 minValuation=-100.0,
                 maxValuation=100.0,
                 isRobust=False,
                 hasNoVeto=False,
                 lowerClosed=True,
                 Threading=False,
                 Debug=False):
        """
        Constructor for SortingDigraph instances.

        """

        from copy import deepcopy
        from decimal import Decimal

        # import the performance tableau
        if argPerfTab == None:
            perfTab = RandomPerformanceTableau(numberOfActions=10,
                                               numberOfCriteria=13)
        else:
            perfTab = argPerfTab
        # normalize the actions as a dictionary construct
        if isinstance(perfTab.actions,list):
            actions = {}
            for x in perfTab.actions:
                actions[x] = {'name': str(x)}
            self.actions = actions
        else:
            self.actions = deepcopy(perfTab.actions)

        # keep a copy of the original actions set before adding the profiles
        self.actionsOrig = deepcopy(self.actions)

        # actionsOrig = self.actionsOrig

        #  input the profiles
        if argProfile != None:
            defaultProfiles = False
            self.criteria = deepcopy(perfTab.criteria)
            self.convertWeightFloatToDecimal()
            self.evaluation = deepcopy(perfTab.evaluation)
            self.convertEvaluationFloatToDecimal()
            if isinstance(argProfile,str): # input from stored instantiation
                fileName = argProfile
                fileNameExt = fileName + '.py'
                profile = {}
                exec(compile(open(fileNameExt).read(), fileNameExt, 'exec'),profile)
                #print(profile)
                self.name = fileName
                self.categories = profile['categories']
                self.criteriaCategoryLimits = profile['criteriaCategoryLimits']
            else: # input from a profiles dictionary
                self.name = 'sorting_with_given_profile'
                self.categories = deepcopy(argProfile['categories'])
                self.criteriaCategoryLimits = deepcopy(argProfile['criteriaCategoryLimits'])
        else:
            defaultProfiles = True
            self.name = 'sorting_with_default_profiles'
            normPerfTab = NormalizedPerformanceTableau(perfTab)
            self.criteria = deepcopy(normPerfTab.criteria)
            self.convertWeightFloatToDecimal()
            self.evaluation = deepcopy(normPerfTab.evaluation)
            self.convertEvaluationFloatToDecimal()

            # supposing all criteria scales between 0.0 and 100.0

            lowValue = 0.0
            highValue = 100.00
            # with preference direction = max
            categories = {}
            k = int(100 / scaleSteps)
            for i in range(0,100+k,k):
                categories[str(i)] = {'name':str(i), 'order':i}
            self.categories = deepcopy(categories)

            criteriaCategoryLimits = {}
            criteriaCategoryLimits['lowerClosed'] = lowerClosed
            for g in self.criteria:
                criteriaCategoryLimits[g] = {}
                for c in categories:
                    criteriaCategoryLimits[g][c]={
                        'minimum':int(c),
                        'maximum':int(c)+k
                        }
            self.criteriaCategoryLimits = deepcopy(criteriaCategoryLimits)

        # set the category limits type (lowerClosed = True is default)
        self.criteriaCategoryLimits['lowerClosed'] = lowerClosed
        #print 'lowerClosed', lowerClosed

        # add the catogory limits to the actions set
        self.profiles = {'min':{},'max':{}}
        self.profileLimits = set()
        for c in list(self.categories.keys()):
            cMinKey = c+'-m'
            cMaxKey = c+'-M'
            self.profileLimits.add(cMinKey)
            self.profileLimits.add(cMaxKey)
            self.actions[cMinKey] = {'name': 'categorical low limits', 'comment': 'Inferior or equal limits for category membership assessment'}
            self.actions[cMaxKey] = {'name': 'categorical high limits', 'comment': 'Lower or equal limits for category membership assessment'}
            self.profiles['min'][cMinKey] = {'category': c, 'name': 'categorical low limits', 'comment': 'Inferior or equal limits for category membership assessment'}
            self.profiles['max'][cMaxKey] = {'category': c, 'name': 'categorical high limits', 'comment': 'Lower or equal limits for category membership assessment'}
            for g in list(self.criteria.keys()):
                try:
                    if self.criteria[g]['preferenceDirection'] == 'max':
                        self.evaluation[g][cMinKey] = Decimal(str(self.criteriaCategoryLimits[g][c]['minimum']))
                        self.evaluation[g][cMaxKey] = Decimal(str(self.criteriaCategoryLimits[g][c]['maximum']))
                    elif self.criteria[g]['preferenceDirection'] == 'min':
                        if not defaultProfiles:
                            highValueg = Decimal(str(self.criteria[g]['scale'][1]))
                        else:
                            highValueg = Decimal(str(highValue))
                        #print 'highValue = ', highValue
                        self.evaluation[g][cMinKey] = -(highValueg - Decimal(str(self.criteriaCategoryLimits[g][c]['minimum'])))
                        self.evaluation[g][cMaxKey] = -(highValueg - Decimal(str(self.criteriaCategoryLimits[g][c]['maximum'])))
                    else:
                        print('===>>>>> Error')
                except:

                    self.evaluation[g][cMinKey] = Decimal(str(self.criteriaCategoryLimits[g][c]['minimum']))
                    self.evaluation[g][cMaxKey] = Decimal(str(self.criteriaCategoryLimits[g][c]['maximum']))



        self.convertEvaluationFloatToDecimal()

        # construct outranking relation
        if isRobust:
            g = RobustOutrankingDigraph(self)
            self.valuationdomain = deepcopy(g.valuationdomain)
            self.relation = deepcopy(g.relation)
        else:
            Min = Decimal('%.4f' % minValuation)
            Max = Decimal('%.4f' % maxValuation)
            Med = (Max + Min)/Decimal('2.0')
            self.valuationdomain = {'min': Min, 'med':Med ,'max':Max }
            if lowerClosed:
                self.relation = self._constructRelation(self.criteria,
                                                       self.evaluation,
                                                       initial=self.actionsOrig,
                                                       terminal=self.profileLimits,
                                                       hasNoVeto=hasNoVeto,
                                                       hasBipolarVeto=True,
                                                        Threading=Threading)
            else:
                self.relation = self._constructRelation(self.criteria,
                                                       self.evaluation,
                                                       terminal=self.actionsOrig,
                                                       initial=self.profileLimits,
                                                       hasNoVeto=hasNoVeto,
                                                        hasBipolarVeto=True,
                                                        Threading=Threading)
            if lowerClosed:
                for x in self.actionsOrig:
                    for y in self.actionsOrig:
                        self.relation[x][y] = Med
                for x in self.profileLimits:
                    self.relation[x] = {}
                    for y in self.actions:
                        self.relation[x][y] = Med
            else:
                for x in self.actionsOrig:
                    self.relation[x] = {}
                    for y in self.actionsOrig:
                        self.relation[x][y] = Med
                for y in self.profileLimits:
                    for x in self.actions:
                        self.relation[x][y] = Med

        # compute weak ordering
        sortingRelation = self.computeSortingRelation(Debug=Debug)
        for x in self.actionsOrig:
            for y in self.actionsOrig:
                self.relation[x][y] = sortingRelation[x][y]

        # reset original action set
        self.actions = deepcopy(self.actionsOrig)
        self.order = len(self.actions)

        # compute weak ordering by choosing
        # self.computeRankingByChoosing() !!! not scalable !!!
        # obsolete: replaced by self.computeWeakOrder()

        # init general digraph Data
        self.order = len(self.actions)
        self.gamma = self.gammaSets()
        self.notGamma = self.notGammaSets()

    def _constructRelation(self,criteria,\
                           evaluation,\
                           initial=None,\
                           terminal=None,\
                           hasNoVeto=False,\
                           hasBipolarVeto=True,\
                           Debug=False,\
                           hasSymmetricThresholds=True,\
                           Threading = False):
        """
        Specialization of the corresponding BipolarOutrankingDigraph method
        """
        from multiprocessing import cpu_count
        
        ##
        if not Threading or cpu_count() < 6:
            return BipolarOutrankingDigraph._constructRelation(self,criteria,\
                                    evaluation,\
                                    initial=initial,\
                                    terminal=terminal,\
                                    hasNoVeto=hasNoVeto,\
                                    hasBipolarVeto=hasBipolarVeto,\
                                    Debug=Debug,\
                                    hasSymmetricThresholds=hasSymmetricThresholds)
        ##
        else:  # parallel computation
            from copy import deepcopy
            from pickle import dumps, loads, load
            from multiprocessing import Process, Lock,\
                                        active_children, cpu_count
            Debug=True
            class myThread(Process):
                def __init__(self, threadID,\
                             InitialSplit, tempDirName,\
                             hasNoVeto, hasBipolarVeto,\
                             hasSymmetricThresholds, Debug):
                    Process.__init__(self)
                    self.threadID = threadID
                    self.InitialSplit = InitialSplit
                    self.workingDirectory = tempDirName
                    self.hasNoVeto = hasNoVeto
                    self.hasBipolarVeto = hasBipolarVeto,
                    hasSymmetricThresholds = hasSymmetricThresholds,
                    self.Debug = Debug
                def run(self):
                    from pickle import dumps, loads
                    from os import chdir
                    chdir(self.workingDirectory)
                    if Debug:
                        print("Starting working in %s on %s" % (self.workingDirectory, self.name))
                    fi = open('dumpSelf.py','rb')
                    digraph = loads(fi.read())
                    fi.close()
                    fiName = 'splitActions-'+str(self.threadID)+'.py'
                    fi = open(fiName,'rb')
                    splitActions = loads(fi.read())
                    fi.close()
                    foName = 'splitRelation-'+str(self.threadID)+'.py'
                    fo = open(foName,'wb')
                    if self.InitialSplit:
                        splitRelation = BipolarOutrankingDigraph._constructRelation(digraph,digraph.criteria,\
                                            digraph.evaluation,\
                                            initial=splitActions,\
                                            terminal=terminal,\
                                            hasNoVeto=hasNoVeto,\
                                            hasBipolarVeto=hasBipolarVeto,\
                                            Debug=False,\
                                            hasSymmetricThresholds=hasSymmetricThresholds)
                    else:
                        splitRelation = BipolarOutrankingDigraph._constructRelation(digraph,digraph.criteria,\
                                            digraph.evaluation,\
                                            initial=initial,\
                                            terminal=splitActions,\
                                            hasNoVeto=hasNoVeto,\
                                            hasBipolarVeto=hasBipolarVeto,\
                                            Debug=False,\
                                            hasSymmetricThresholds=hasSymmetricThresholds)
                    fo.write(dumps(splitRelation,-1))
                    fo.close()
            
            print('Threading ...')
            from tempfile import TemporaryDirectory
            with TemporaryDirectory() as tempDirName:
                from copy import deepcopy
                selfDp = deepcopy(self)
                selfFileName = tempDirName +'/dumpSelf.py'
                if Debug:
                    print('temDirName, selfFileName', tempDirName,selfFileName)
                fo = open(selfFileName,'wb')
                pd = dumps(selfDp,-1)
                fo.write(pd)
                fo.close()
                
                nbrCores = cpu_count()-2
                print('Nbr of cpus = ',nbrCores)

                ni = len(initial)
                nt = len(terminal)
                if ni > nt:
                    n = ni
                    actions2Split = list(initial)
                    InitialSplit = True
                else:
                    n = nt
                    actions2Split = list(terminal)
                    InitialSplit = False
                if Debug:
                    print('InitialSplit, actions2Split', InitialSplit, actions2Split)
            
                nit = n//nbrCores
                if nit*nbrCores < n:
                    nbrOfJobs = nbrCores + 1
                else:
                    nbrOfJobs = nbrCores
                if Debug:
                    print('nbr of actions to split',n)
                    print('nbr of jobs = ',nbrOfJobs)    
                    print('nbr of splitActions = ',nit)

                relation = {}
                for x in initial:
                    relation[x] = {}
                    for y in terminal:
                        relation[x][y] = self.valuationdomain['med']
                i = 0
                for j in range(nbrOfJobs):
                    print('iteration = ',j+1)
                    splitActions=[]
                    for k in range(nit):
                        if i < n:
                            splitActions.append(actions2Split[i])
                        i += 1
                    if Debug:
                        print(splitActions)
                    foName = tempDirName+'/splitActions-'+str(j)+'.py'
                    fo = open(foName,'wb')
                    spa = dumps(splitActions,-1)
                    fo.write(spa)
                    fo.close()
                    splitThread = myThread(j,InitialSplit,tempDirName,hasNoVeto,hasBipolarVeto,hasSymmetricThresholds,Debug)
                    splitThread.start()
                    
                while active_children() != []:
                    pass
                    
                print('Exiting computing threads')
                for j in range(nbrOfJobs):
                    fiName = tempDirName+'/splitActions-'+str(j)+'.py'
                    fi = open(fiName,'rb')
                    splitActions = loads(fi.read())
                    fi.close()
                    fiName = tempDirName+'/splitRelation-'+str(j)+'.py'
                    fi = open(fiName,'rb')
                    splitRelation = loads(fi.read())
                    fi.close()
                    
                    if InitialSplit:
                        for x in splitActions:
                            for y in terminal:
                                relation[x][y] = splitRelation[x][y]
                    else:  
                        for x in initial:
                            for y in splitActions:
                                relation[x][y] = splitRelation[x][y]   
                return relation
    
        
    def htmlCriteriaCategoryLimits(self,tableTitle='Category limits'):
        """
        Renders category minimum and maximum limits for each criterion
        as a html table.
        """
        s = ''
        s += '<h1>%s</h1>' % tableTitle
        s += '<table border="1">'

        criterionKeys = [x for x in self.criteria]
        categoryKeys = [x for x in self.categories]
        s += '<tr><th>Criteria</th>'
        for g in criterionKeys:
            s += '<th>%s</th>' % g
        s += '</tr>'

        for g in criterionKeys:
            s += '<tr><th>%s</th></tr>' % (g)
            s += '<tr><th>Lower limit</th>'
            for c in categoryKeys:
                #print '\t', c, (self.criteriaCategoryLimits[g][c]['minimum'],self.criteriaCategoryLimits[g][c]['maximum'])
                s += '<td>%2.f</td>' % (self.criteriaCategoryLimits[g][c]['minimum'])
            s += '</tr>'
            s += '<tr><th>Upper limit</th>'
            for c in categoryKeys:
                #print '\t', c, (self.criteriaCategoryLimits[g][c]['minimum'],self.criteriaCategoryLimits[g][c]['maximum'])
                s += '<td>%2.f</td>' % (self.criteriaCategoryLimits[g][c]['maximum'])
        s += '</tr>'

        s += '</table>'
        return s

    def computeSortingRelation(self,categoryContents=None,Debug=False):
        """
        constructs a bipolar sorting relation using the category contents.
        """
        if categoryContents == None:
            categoryContents = self.computeCategoryContents()
        categoryKeys = self.orderedCategoryKeys()

        Max = self.valuationdomain['max']
        Med = self.valuationdomain['med']
        Min = self.valuationdomain['min']
        actions = [x for x in self.actionsOrig]
        currActions = set(actions)
        #sortedActions = set()
        sortingRelation = {}
        for x in actions:
            sortingRelation[x] = {}
            for y in actions:
                sortingRelation[x][y] = Med
                
        if Debug:
            print('categoryContents',categoryContents)
        for i in categoryKeys:
            ibch = set(categoryContents[i])
            ribch = set(currActions) - ibch
            if Debug:
                print('ibch,ribch',ibch,ribch)
            for x in ibch:
##                for y in sortedActions:
##                    sortingRelation[x][y] = Max
##                    sortingRelation[y][x] = Min                    
                for y in ibch:
                    sortingRelation[x][y] = Med
                    sortingRelation[y][x] = Med
                for y in ribch:
                    sortingRelation[x][y] = Min
                    sortingRelation[y][x] = Max
            currActions = currActions - ibch
##            sortedActions = sortedActions | ibch 
        return sortingRelation


    def showCriteriaCategoryLimits(self):
        """
        Shows category minimum and maximum limits for each criterion.
        """
        try:
            lowerClosed = self.criteriaCategoryLimits['lowerClosed']
        except:
            lowerClosed = True
        criterionKeys = [x for x in self.criteria]
        categoryKeys = [x for x in self.categories]
        for g in criterionKeys:
            print(g)
            for c in categoryKeys:
                if lowerClosed:
                    print('\t%s [%s; %s[' % (c, self.criteriaCategoryLimits[g][c]['minimum'],self.criteriaCategoryLimits[g][c]['maximum']))
                else:
                    print('\t%s ]%s; %s]' % (c, self.criteriaCategoryLimits[g][c]['minimum'],self.criteriaCategoryLimits[g][c]['maximum']))

    def getActionsKeys(self,action=None):
        """
        extract normal actions keys()
        """
        profiles_m = set([x for x in list(self.profiles['min'].keys())])
        profiles_M = set([x for x in list(self.profiles['max'].keys())])
        if action == None:
            actionsExt = set([x for x in list(self.actions.keys())])
            return actionsExt - profiles_m - profiles_M
        else:
            return set([action])
            
            

    def orderedCategoryKeys(self,Reverse=False):
        """
        Renders the ordered list of category keys
        based on self.categories['order'] numeric values.
        """
        categoriesSort = []
        for c in list(self.categories.keys()):
            categoriesSort.append((self.categories[c]['order'],c))
        categoriesSort.sort()
        orderedCategoryKeys = [x for (o,x) in categoriesSort]
        if Reverse:
            orderedCategoryKeys.reverse()
        return orderedCategoryKeys

    def computeWeakOrder(self,Descending=True):
        """
        Specialisation for QauntilesSortingDigraphs.
        """
        from decimal import Decimal
        cC = self.computeCategoryContents()
        
        if Descending:
            cCKeys = self.orderedCategoryKeys(Reverse = True)
        else:
            cCKeys = self.orderedCategoryKeys(Reverse = False)
        n = len(cC)
        n2 = n//2
        ordering = []
        
        for i in range(n2):
            if i == 0:
                x = cC[cCKeys[i]]
                y = cC[cCKeys[n-i-1]]
                setx = set(x)
                sety = set(y) - setx
            else:
                x = list(set(cC[cCKeys[i]]) - (setx | sety))
                setx = setx | set(x)
                y = list(set(cC[cCKeys[n-i-1]]) - (setx | sety))
                sety = sety | set(y)
            if x != [] or y != []:
                ordering.append( ( (Decimal(str(i+1)),x),(Decimal(str(n-i)),y) ) )
        if 2*n2 < n:
            if n2 == 0:
                x = cC[cCKeys[n2]]
            else:
                x = list(set(cC[cCKeys[n2]]) - (setx | sety))
            ordering.append( ( (Decimal(str(n2+1)),x),(Decimal(str(n2+1)),x) ) )

        #print(ordering)
        
        orderingList = []
        n = len(ordering)
        for i in range(n):
            x = ordering[i][0][1]
            if x != []:
                orderingList.append(x)
        for i in range(n):
            y = ordering[n-i-1][1][1]
            if y != []:
                orderingList.append(y)
                
        return orderingList

    def showOrderedRelationTable(self,direction="decreasing"):
        """
        Showing the relation table in decreasing (default) or increasing order.
        """
        if direction == "decreasing":
            Descending = True
        else:
            Descending = False

        weakOrdering = self.computeWeakOrder(Descending)
        
        actionsList = []
        for eq in weakOrdering:
            #print(eq)
            eq.sort()
            for x in eq:
                actionsList.append(x)
        if len(actionsList) != len(self.actions):
            print('Error !: missing action(s) %s in ordered table.')
            
        Digraph.showRelationTable(self,actionsSubset=actionsList,\
                                relation=self.relation,\
                                Sorted=False,\
                                ReflexiveTerms=False)

    def exportDigraphGraphViz(self,fileName=None, bestChoice=set(),worstChoice=set(),noSilent=True,graphType='png',graphSize='7,7'):
        """
        export GraphViz dot file for digraph drawing filtering.
        """
        Digraph.exportGraphViz(self, fileName=fileName,\
                               bestChoice=bestChoice,\
                               worstChoice=worstChoice,\
                               noSilent=noSilent,\
                               graphType=graphType,\
                               graphSize=graphSize)


    def exportGraphViz(self,fileName=None,direction='decreasing',\
                       noSilent=True,graphType='png',\
                       graphSize='7,7',\
                       fontSize=10):
        """
        export GraphViz dot file for weak order (Hasse diagram) drawing
        filtering from SortingDigraph instances.
        """
        import os
        from copy import deepcopy

        def _safeName(t0):
            t = t0.split(sep="-")
            t1 = t[0]
            n = len(t)
            if n > 1:
                for i in range(1,n):
                    t1 += '%s%s' % ('_',t[i])
            return t1
                
        if direction == 'decreasing':
            ordering = self.computeWeakOrder(Descending=True)
        else:
            ordering = self.computeWeakOrder(Descending=False)
            
##            try:
##                rankingByChoosing = self.rankingByBestChoosing['result']
##            except:
##                self.computeRankingByBestChoosing()
##                rankingByChoosing = self.rankingByBestChoosing['result']
##        else:
            
##            try:
##                rankingByChoosing = self.rankingByLastChoosing['result']
##            except:
##                self.computeRankingByLastChoosing()
##                rankingByChoosing = self.rankingByLastChoosing['result']
        
        if noSilent:
            print('*---- exporting a dot file for GraphViz tools ---------*')
        actionKeys = [x for x in self.actions]
        n = len(actionKeys)
        relation = self.relation
        Med = self.valuationdomain['med']
        i = 0
        if fileName == None:
            name = self.name
        else:
            name = fileName
        dotName = name+'.dot'
        if noSilent:
            print('Exporting to '+dotName)
##        if bestChoice != set():
##            rankBestString = '{rank=max; '
##        if worstChoice != set():
##            rankWorstString = '{rank=min; '
        fo = open(dotName,'w')
        fo.write('digraph G {\n')
        fo.write('graph [ bgcolor = cornsilk, ordering = out, fontname = "Helvetica-Oblique",\n fontsize = 12,\n label = "')
        fo.write('\\nweakOrders module (graphviz)\\n R. Bisdorff, 2014", size="')
        fo.write(graphSize),fo.write('",fontsize=%d];\n' % fontSize)
        # nodes
        for x in actionKeys:
            try:
                nodeName = self.actions[x]['shortName']
            except:
                nodeName = str(x)
            node = '%s [shape = "circle", label = "%s", fontsize=%d];\n'\
                   % (str(_safeName(x)),_safeName(nodeName),fontSize)
            fo.write(node)
        # same ranks for Hasses equivalence classes
        k = len(ordering)
        for i in range(k):
            sameRank = '{ rank = same; '
            ich = ordering[i]
            for x in ich:
                sameRank += str(_safeName(x))+'; '
            sameRank += '}\n'
            print(i,sameRank)
            fo.write(sameRank)
        # save original relation
        originalRelation = deepcopy(self.relation)
        
        self.closeTransitive(Reverse=True)
        for i in range(k-1):
            ich = ordering[i]
            for x in ich:
                for j in range(i+1,k):
                    jch = ordering[j]
                    for y in jch:
                        #edge = 'n'+str(i+1)+'-> n'+str(i+2)+' [dir=forward,style="setlinewidth(1)",color=black, arrowhead=normal] ;\n'
                        if self.relation[x][y] > self.valuationdomain['med']:
                            arcColor = 'black'
                            edge = '%s-> %s [style="setlinewidth(%d)",color=%s] ;\n' % (_safeName(x),_safeName(y),1,arcColor)
                            fo.write(edge)
                        elif self.relation[y][x] > self.valuationdomain['med']:
                            arcColor = 'black'
                            edge = '%s-> %s [style="setlinewidth(%d)",color=%s] ;\n' % (_safeName(y),_safeName(x),1,arcColor)
                            fo.write(edge)
                                                  
        fo.write('}\n \n')
        fo.close()
        # restore original relation
        self.relation = deepcopy(originalRelation)
        
        commandString = 'dot -Grankdir=TB -T'+graphType+' ' +dotName+' -o '+name+'.'+graphType
            #commandString = 'dot -T'+graphType+' ' +dotName+' -o '+name+'.'+graphType
        if noSilent:
            print(commandString)
        try:
            os.system(commandString)
        except:
            if noSilent:
                print('graphViz tools not avalaible! Please check installation.')


    def computeSortingCharacteristics(self, action=None, Comments=False):
        """
        Renders a bipolar-valued bi-dictionary relation
        representing the degree of credibility of the
        assertion that "action x in A belongs to category c in C",
        ie x outranks low category limit and does not outrank
        the high category limit.
        """
        Min = self.valuationdomain['min']
        Med = self.valuationdomain['med']
        Max = self.valuationdomain['max']

        actions = self.getActionsKeys(action)
            
        categories = self.orderedCategoryKeys()

        try:
            lowerClosed = self.criteriaCategoryLimits['lowerClosed']
        except:
            lowerClosed = True

        sorting = {}
        for x in actions:
            sorting[x] = {}
            for c in categories:
                sorting[x][c] = {}
                cMinKey= c+'-m'
                cMaxKey= c+'-M'
                if lowerClosed:
                    lowLimit = self.relation[x][cMinKey]
                    notHighLimit = Max - self.relation[x][cMaxKey] + Min
                else:
                    lowLimit = Max - self.relation[cMinKey][x] + Min
                    notHighLimit = self.relation[cMaxKey][x]
                if Comments:
                    print('%s in %s: low = %.2f, high = %.2f' % \
                          (x, c,lowLimit,notHighLimit), end=' ')
                categoryMembership = min(lowLimit,notHighLimit)
                sorting[x][c]['lowLimit'] = lowLimit
                sorting[x][c]['notHighLimit'] = notHighLimit
                sorting[x][c]['categoryMembership'] = categoryMembership

                if Comments:
                    print('\t %.2f \t %.2f \t %.2f' % (sorting[x][c]['lowLimit'], sorting[x][c]['notHighLimit'], sorting[x][c]['categoryMembership']))

        return sorting

    def showSortingCharacteristics(self, action=None):
        """
        Renders a bipolar-valued bi-dictionary relation
        representing the degree of credibility of the
        assertion that "action x in A belongs to category c in C",
        ie x outranks low category limit and does not outrank
        the high category limit.
        """
        Min = self.valuationdomain['min']
        Med = self.valuationdomain['med']
        Max = self.valuationdomain['max']

        actions = self.getActionsKeys(action)
            
        categories = self.orderedCategoryKeys()

        try:
            LowerClosed = self.criteriaCategoryLimits['lowerClosed']
        except:
            LowerClosed = True

        sorting = {}
        if LowerClosed:
            print('x  in  K_k\t r(x >= m_k)\t r(x < M_k)\t r(x in K_k)')
        else:
            print('x  in  K_k\t r(m_k < x)\t r(M_k >= x)\t r(x in K_k)')
        for x in actions:
            sorting[x] = {}
            for c in categories:
                sorting[x][c] = {}
                cMinKey= c+'-m'
                cMaxKey= c+'-M'
                if LowerClosed:
                    lowLimit = self.relation[x][cMinKey]
                    notHighLimit = Max - self.relation[x][cMaxKey] + Min
                else:
                    lowLimit = Max - self.relation[cMinKey][x] + Min
                    notHighLimit = self.relation[cMaxKey][x]
                if LowerClosed:
                    print('%s in [%s - [\t' % (x, c), end=' ')
                else:
                    print('%s in [ - %s[\t' % (x, c), end=' ')
                categoryMembership = min(lowLimit,notHighLimit)
                sorting[x][c]['lowLimit'] = lowLimit
                sorting[x][c]['notHighLimit'] = notHighLimit
                sorting[x][c]['categoryMembership'] = categoryMembership
                print('%.2f\t\t %.2f\t\t %.2f' % (sorting[x][c]['lowLimit'], sorting[x][c]['notHighLimit'], sorting[x][c]['categoryMembership']))

    def _computePessimisticSorting(self, Comments=False):
        """
        Returns a dictionary with category keys gathering the actions per ordered category on
        the basis of a bipolar valued outranking relation Stilde with low and high category limt profiles.

        An action x is added to cotegory c if (a Stilde c_min) > Med and a Stilde C_Max <= Med.
        """
        actions = self.getActionsKeys()
        categories = self.orderedCategoryKeys()
        Med = self.valuationdomain['med']

        sorts = {}
        for c in categories:
            sorts[c] = set()
        for x in actions:
            if Comments:
                print(x)
            for c in categories:
                overMin=True
                overMax = True
                cMinKey= c+'-m'
                cMaxKey= c+'-M'
                if Comments:
                    print('\t %s: low = %.2f, high = %.2f' % (c,self.relation[x][cMinKey],self.relation[x][cMaxKey]))
                if self.relation[x][cMinKey] > Med:
                    overMin = True
                else:
                    break
                if self.relation[x][cMaxKey] <= Med:
                    overMax = False
                    #print '\t %s: low = %.2f, high = %.2f' % (c,self.relation[x][cMinKey],self.relation[x][cMaxKey])
                    sorts[c].add(x)
                    break
            if overMin and overMax:
                #print '\t %s: low = %.2f, high = %.2f' % (c,self.relation[x][cMinKey],self.relation[x][cMaxKey])
                sorts[c].add(x)
        if Comments:
            print('Sorting results')
            for c in self.orderedCategoryKeys():
                print('%s: %s' % (c, str(sorts[c])))
        return sorts

    def computeCategoryContents(self,Reverse=False,Comments=False):
        """
        Computes the sorting results per category.
        """
        actions = list(self.getActionsKeys())
        actions.sort()
        sorting = self.computeSortingCharacteristics(Comments=Comments)

        categoryContent = {}
        for c in self.orderedCategoryKeys(Reverse=Reverse):
            categoryContent[c] = []
            for x in actions:
                if sorting[x][c]['categoryMembership'] >= self.valuationdomain['med']:
                    categoryContent[c].append(x)
        return categoryContent
                                                     
    def showSorting(self,Reverse=True,isReturningHTML=False):
        """
        Shows sorting results in decreasing or increasing (Reverse=False)
        order of the categories. If isReturningHTML is True (default = False)
        the method returns a htlm table with the sorting result.
        """
        #from string import replace
        categoryContent = self.computeCategoryContents()
        try:
            lowerClosed = self.criteriaCategoryLimits['lowerClosed']
        except:
            lowerClosed = true
        if Reverse:
            print('\n*--- Sorting results in descending order ---*\n')
            prev_c = '>'
            if isReturningHTML:
                prev_c = '&gt;'
                html = '<h2>Sorting results in descending order</h2>'
                html += '<table style="background-color:White;" border="1"><tr bgcolor="#9acd32"><th>Categories</th><th>Assorting</th></tr>'
            for c in self.orderedCategoryKeys(Reverse=Reverse):
                if lowerClosed:
                    print(']%s - %s]:' % (prev_c,c), end=' ')
                    print('\t',categoryContent[c])
                    if isReturningHTML:
                        html += '<tr><td bgcolor="#FFF79B">]%s - %s]</td>' % (prev_c,c)
                        catString = str(categoryContent[c])
                        html += '<td>%s</td></tr>' % catString.replace('\'','&apos;')
                else:
                    print('[%s - %s[:' % (prev_c,c), end=' ')
                    print('\t',categoryContent[c])
                    if isReturningHTML:
                        html += '<tr><td bgcolor="#FFF79B">[%s - %s[</td>' % (prev_c,c)
                        catString = str(categoryContent[c])
                        html += '<td>%s</td></tr>' % catString.replace('\'','&apos;')
                prev_c = c
        else:
            print('\n*--- Sorting results in ascending order ---*\n')
            if isReturningHTML:
                html = '<h2>Sorting results in ascending order</h2>'
                html += '<table style="background-color:White;" border="1"><tr bgcolor="#9acd32"><th>Categories</th><th>Assorting</th></tr>'
            cat = [x for x in self.orderedCategoryKeys(Reverse=Reverse)]
            if isReturningHTML:
                cat.append('&lt;')
            else:
                cat.append('<')

            for i in range(len(cat)-1):
                if lowerClosed:
                    print('[%s - %s[:' % (cat[i],cat[i+1]), end=' ')
                    print('\t',categoryContent[cat[i]])
                    if isReturningHTML:
                        html += '<tr><td bgcolor="#FFF79B">]%s - %s]</td>' % (cat[i],cat[i+1])
                        catString = str(categoryContent[cat[i]])
                        html += '<td>%s</td></tr>' % catString.replace('\'','&apos;')
                else:
                    print(']%s - %s]:' % (cat[i],cat[i+1]), end=' ')
                    print('\t',categoryContent[cat[i]])
                    if isReturningHTML:
                        html += '<tr><td bgcolor="#FFF79B">[%s - %s[</td>' % (cat[i],cat[i+1])
                        catString = str(categoryContent[cat[i]])
                        html += '<td>%s</td></tr>' % catString.replace('\'','&apos;')

        if isReturningHTML:
            html += '</table>'
            return html

    def saveProfilesXMCDA2(self,fileName='temp',category='XMCDA 2.0 format',user='sortinDigraphs Module (RB)',version='saved from Python session',title='Sorting categories in XMCDA-2.0 format.',variant='Rubis',valuationType='bipolar',isStringIO=False,stringNA='NA',comment='produced by saveProfilesXMCDA2()'):
        """
        Save profiles object self in XMCDA 2.0 format.
        """
        import codecs
        if not isStringIO:
            print('*----- saving sorting profiles in XMCDA 2.0 format  -------------*')
        nameExt = fileName+'.xml'
        if isStringIO:
            comment='produced by stringIO()'
            import io
            ## ms = 100 * len(self.actions) + 500 * len(self.criteria) * 20 * len(self.evaluation)
            ## print 'estimated mapped memory size = %d' % (ms)
            ##fo = mmap.mmap(-1,ms)
            fo = io.StringIO()
        else:
            #nameExt = fileName+'.xmcda2'
            fo = codecs.open(nameExt,'w',encoding='utf-8')
        fo.write('<?xml version="1.0" encoding="UTF-8"?>\n')
        fo.write('<?xml-stylesheet type="text/xsl" href="xmcda2Rubis.xsl"?>\n')
        fo.write(str('<xmcda:XMCDA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.decision-deck.org/2010/XMCDA-2.1.0-Rubis http://leopold-loewenheim.uni.lu/XMCDA2/XMCDA-2.1.0-Rubis.xsd" xmlns:xmcda="http://www.decision-deck.org/2010/XMCDA-2.1.0-Rubis" instanceID="void">\n'))

        # write description
        fo.write('<projectReference id="%s" name="%s">\n' % (fileName,nameExt))
        fo.write('<title>%s</title>\n' % (str(title)) )
        fo.write('<author>%s</author>\n' % (user) )
        fo.write('<version>%s</version>\n' % (version) )
        fo.write('<comment>%s</comment>\n' % (str(comment)) )
        fo.write('</projectReference>\n')


        #  save categories
        categoriesList = [x for x in self.categories]
        categoriesList.sort()
        na = len(categoriesList)
        categories = self.categories
        fo.write('<categories mcdaConcept="%s">\n' % ('categories'))
        fo.write('<description>\n')
        fo.write('<subTitle>Sorting categories.</subTitle>\n')
        fo.write('</description>\n')
        for i in range(na):
            try:
                categoryName = str(categories[categoriesList[i]]['name'])
            except:
                categoryName = categoriesList[i]
            fo.write('<category id="%s" name="%s" mcdaConcept="%s">\n' % (categoriesList[i],categoryName,'sortingCategory'))
            fo.write('<description>\n')
            fo.write('<comment>')
            try:
                fo.write(str(categories[categoriesList[i]]['comment']))
            except:
                fo.write('None')
            fo.write('</comment>\n')
            fo.write('</description>\n')
            fo.write('<type>real</type>\n')
            fo.write('<active>true</active>\n')
            fo.write('</category>\n')
        fo.write('</categories>\n')

        # save criteriaCategoryLimits
        criteriaList = [x for x in self.criteria]
        criteriaList.sort()
        categoriesList = [x for x in self.categories]
        categoriesList.sort()
        criteria = self.criteria
        fo.write('<criteriaCategoryLimits mcdaConcept="categoryProfiles">\n')
        fo.write('<description>\n')
        fo.write('<subTitle>Sorting profiles.</subTitle>\n')
        fo.write('</description>\n')
        for g in criteriaList:
            for c in categoriesList:
                try:
                    criterionName = str(criteria[g]['id'])
                except:
                    criterionName = g
                try:
                    categoryName = str(category[c]['id'])
                except:
                    categoryName = c

                fo.write('<criterionCategoryLimits id="lim_%s_%s" mcdaConcept="%s">\n' % (criterionName,categoryName,'criterionCategoryLimits' ) )
                fo.write('<description>\n')
                fo.write('<comment>%s</comment>\n' % ('No comment') )
                fo.write('<version>%s</version>\n' % ('Rubis k-sorting') )
                fo.write('</description>\n')
                fo.write('<criterionID>%s</criterionID>\n' % (criterionName) )
                fo.write('<categoryID>%s</categoryID>\n' % (categoryName) )
                fo.write('<lowLimit><real>%.2f</real></lowLimit>\n' % (self.criteriaCategoryLimits[g][c]['minimum']) )
                fo.write('<highLimit><real>%.2f</real></highLimit>\n' % (self.criteriaCategoryLimits[g][c]['maximum']) )

                fo.write('</criterionCategoryLimits>\n')
        fo.write('</criteriaCategoryLimits>\n')
        #########################
        fo.write('</xmcda:XMCDA>\n')
        if isStringIO:
            problemText = fo.getvalue()
            fo.close
            return problemText
        else:
            fo.close()
            print('File: ' + nameExt + ' saved !')

    
class QuantilesSortingDigraph(SortingDigraph,WeakOrder):
    """
    Specialisation of the sortingDigraph Class
    for sorting of alternatives into quantiles delimited ordered classes.
    
    .. note::

        We generally require an PerformanceTableau instance or a valid filename.
        If none is given, then a default profile with the limiting quartiles Q0,Q1,Q2, Q3 and Q4 is used on each criteria.
        By default lower closed limits of categories are supposed to be used in the sorting.

    Example Python3 session:

    >>> from sortingDigraphs import *
    >>> t = RandomCBPerformanceTableau(numberOfActions=7,numberOfCriteria=5,
    ...                                weightDistribution='equiobjectives')
    >>> qs = QuantilesSortingDigraph(t,limitingQuantiles=10)
    >>> qs.showSorting()
    *--- Sorting results in descending order ---*
    [0.90 - <[: 	 []
    [0.80 - 0.90[: 	 []
    [0.70 - 0.80[: 	 []
    [0.60 - 0.70[: 	 ['a02', 'a07']
    [0.50 - 0.60[: 	 ['a02', 'a04', 'a05', 'a06']
    [0.40 - 0.50[: 	 []
    [0.30 - 0.40[: 	 []
    [0.20 - 0.30[: 	 ['a03']
    [0.10 - 0.20[: 	 ['a01']
    [0.00 - 0.10[: 	 []
    >>> qs.exportGraphViz('quantilesSorting')
    
    .. image:: quantilesSorting.png
    """

    def __init__(self,argPerfTab=None,
                 limitingQuantiles=None,
                 LowerClosed=True,
                 PrefThresholds=True,
                 hasNoVeto=False,
                 minValuation=-100.0,
                 maxValuation=100.0,
                 outrankingType = "bipolar",
                 Threading=False,
                 Debug=False):
        """
        Constructor for QuantilesSortingDigraph instances.

        """

        from copy import deepcopy
        from decimal import Decimal

        # import the performance tableau
        if argPerfTab == None:
            perfTab = RandomPerformanceTableau(numberOfActions=10,
                                               numberOfCriteria=13)
        else:
            perfTab = argPerfTab
        # normalize the actions as a dictionary construct
        if isinstance(perfTab.actions,list):
            actions = {}
            for x in perfTab.actions:
                actions[x] = {'name': str(x)}
            self.actions = actions
        else:
            self.actions = deepcopy(perfTab.actions)

        # keep a copy of the original actions set before adding the profiles
        self.actionsOrig = deepcopy(self.actions)

        #  normalizing the performance tableau
        normPerfTab = NormalizedPerformanceTableau(perfTab)
        self.criteria = deepcopy(normPerfTab.criteria)
        self.convertWeightFloatToDecimal()
        self.evaluation = deepcopy(normPerfTab.evaluation)
        self.convertEvaluationFloatToDecimal()
        
        #  compute the limiting quantiles
        if isinstance(limitingQuantiles,list):
            self.name = 'sorting_with_given_quantiles'
            newLimitingQuantiles = []
            for x in limitingQuantiles:
                newLimitingQuantiles.append(Decimal(str(x)))
            limitingQuantiles = newLimitingQuantiles
            if Debug:
                print('convert to decimal!',limitingQuantiles)
        else:
            limitingQuantiles = self._computeQuantiles(limitingQuantiles,Debug=Debug)
        self.limitingQuantiles = deepcopy(limitingQuantiles)

        if Debug:
            print('limitingQuantiles',self.limitingQuantiles)

        # supposing all criteria scales between 0.0 and 100.0

        lowValue = 0.0
        highValue = 100.00
        # with preference direction = max
        categories = {}
        k = len(limitingQuantiles)-1
        if LowerClosed:
            for i in range(0,k-1):
                categories[str(i+1)] = {'name':'[%.2f - %.2f['\
                %(limitingQuantiles[i],limitingQuantiles[i+1]),\
                                'order':i+1,\
                                'lowLimit': '[%.2f' % (limitingQuantiles[i]),
                                'highLimit': '%.2f[' % (limitingQuantiles[i+1])}
            categories[str(k)] = {'name':'[%.2f - <['\
                %(limitingQuantiles[k-1]), 'order':k,\
                                  'lowLimit': '[%.2f' % (limitingQuantiles[k-1]),\
                                  'highLimit': '<['}                 
        else:
            categories[str(1)] = {'name':']< - %.2f]'\
                %(limitingQuantiles[1]), 'order':1,
                    'highLimit': '%.2f]' % (limitingQuantiles[1]),\
                    'lowLimit': ']<'}                                  
            for i in range(1,k):
                categories[str(i+1)] = {'name':']%.2f - %.2f]'\
                %(limitingQuantiles[i],limitingQuantiles[i+1]), 'order':i+1,
                        'lowLimit': ']%.2f' % (limitingQuantiles[i]),
                        'highLimit': '%.2f]' % (limitingQuantiles[i+1])}
        self.categories = deepcopy(categories)

        criteriaCategoryLimits = {}
        criteriaCategoryLimits['lowerClosed'] = LowerClosed
        self.criteriaCategoryLimits = deepcopy(criteriaCategoryLimits)
        for g in self.criteria:
            gQuantiles = self._computeLimitingQuantiles(g,PrefThresholds=PrefThresholds,Debug=Debug)                
            criteriaCategoryLimits[g] = {}
            for c in categories:
                criteriaCategoryLimits[g][c]={
                    'minimum':gQuantiles[(int(c)-1)],
                    'maximum':gQuantiles[int(c)]
                    }
        self.criteriaCategoryLimits = deepcopy(criteriaCategoryLimits)

        # set the category limits type (lowerClosed = True is default)
        # self.criteriaCategoryLimits['lowerClosed'] = LowerClosed
        # print 'lowerClosed', lowerClosed

        # add the catogory limits to the actions set
        self.profiles = {'min':{},'max':{}}
        self.profileLimits = set()
        for c in list(self.categories.keys()):
            cMinKey = c+'-m'
            cMaxKey = c+'-M'
            self.profileLimits.add(cMinKey)
            self.profileLimits.add(cMaxKey)
            self.actions[cMinKey] = {'name': 'categorical low limits', 'comment': 'Inferior or equal limits for category membership assessment'}
            self.actions[cMaxKey] = {'name': 'categorical high limits', 'comment': 'Lower or equal limits for category membership assessment'}
            self.profiles['min'][cMinKey] = {'category': c, 'name': 'categorical low limits', 'comment': 'Inferior or equal limits for category membership assessment'}
            self.profiles['max'][cMaxKey] = {'category': c, 'name': 'categorical high limits', 'comment': 'Lower or equal limits for category membership assessment'}
            for g in list(self.criteria.keys()):
                try:
                    if self.criteria[g]['preferenceDirection'] == 'max':
                        self.evaluation[g][cMinKey] = Decimal(str(self.criteriaCategoryLimits[g][c]['minimum']))
                        self.evaluation[g][cMaxKey] = Decimal(str(self.criteriaCategoryLimits[g][c]['maximum']))
                    elif self.criteria[g]['preferenceDirection'] == 'min':
                        if not defaultProfiles:
                            highValueg = Decimal(str(self.criteria[g]['scale'][1]))
                        else:
                            highValueg = Decimal(str(highValue))
                        #print 'highValue = ', highValue
                        self.evaluation[g][cMinKey] = -(highValueg - Decimal(str(self.criteriaCategoryLimits[g][c]['minimum'])))
                        self.evaluation[g][cMaxKey] = -(highValueg - Decimal(str(self.criteriaCategoryLimits[g][c]['maximum'])))
                    else:
                        print('===>>>>> Error')
                except:

                    self.evaluation[g][cMinKey] = Decimal(str(self.criteriaCategoryLimits[g][c]['minimum']))
                    self.evaluation[g][cMaxKey] = Decimal(str(self.criteriaCategoryLimits[g][c]['maximum']))



        self.convertEvaluationFloatToDecimal()

        # construct outranking relation
        if outrankingType == "robust":
            g = RobustOutrankingDigraph(self)
            self.valuationdomain = deepcopy(g.valuationdomain)
            self.relation = deepcopy(g.relation)
        elif outrankingType == "likely":
            g = StochasticBipolarOutrankingDigraph(self,
                                                   sampleSize = 50,
                                                   samplingSeed = None,
                                                   hasNoVeto = hasNoVeto,
                                                   Debug = Debug,
                                                   spread = 1.0,
                                                   likelihood = 0.9,
                                                   distribution = 'triangular')
            self.valuationdomain = deepcopy(g.valuationdomain)
            self.relation = deepcopy(g.relation)
            
        else:
            g = BipolarOutrankingDigraph(normPerfTab,hasNoVeto=hasNoVeto)
            g.recodeValuation(minValuation,maxValuation)
            self.relationOrig = deepcopy(g.relation)
            Min = g.valuationdomain['min']
            Max = g.valuationdomain['max']
##            Min = Decimal(str(minValuation))
##            Max = Decimal(str(maxValuation))
            Med = (Max + Min)/Decimal('2.0')
            self.valuationdomain = {'min': Min, 'med':Med ,'max':Max }
            if LowerClosed:
                self.relation = self._constructRelation(self.criteria,
                                                       self.evaluation,
                                                       initial=self.actionsOrig,
                                                       terminal=self.profileLimits,
                                                       hasNoVeto=hasNoVeto,
                                                       hasBipolarVeto=True,
                                                        Threading=Threading)
            else:
                self.relation = self._constructRelation(self.criteria,
                                                       self.evaluation,
                                                       terminal=self.actionsOrig,
                                                       initial=self.profileLimits,
                                                       hasNoVeto=hasNoVeto,
                                                        hasBipolarVeto=True,
                                                        Threading=Threading)
            if LowerClosed:
                for x in self.actionsOrig:
                    for y in self.actionsOrig:
##                        self.relation[x][y] = g.relation[x][y]
                        self.relation[x][y] = Med
                for x in self.profileLimits:
                    self.relation[x] = {}
                    for y in self.actions:
                        self.relation[x][y] = Med
            else:
                for x in self.actionsOrig:
                    self.relation[x] = {}
                    for y in self.actionsOrig:
##                        self.relation[x][y] = g.relation[x][y]
                        self.relation[x][y] = Med
                for y in self.profileLimits:
                    for x in self.actions:
                        self.relation[x][y] = Med

        # compute weak ordering
        sortingRelation = self.computeSortingRelation(Debug=Debug)
        for x in self.actionsOrig:
            for y in self.actionsOrig:
                self.relation[x][y] = sortingRelation[x][y]

        # reset original action set
        self.actions = self.actionsOrig
        self.order = len(self.actions)

        # compute weak ordering by choosing
        
##        if self.order < 20:
##            self.computeRankingByChoosing(CoDual=True)
        
        # init general digraph Data
        self.gamma = self.gammaSets()
        self.notGamma = self.notGammaSets()

    def showWeakOrder(self,Descending=True):
        """
        Specialisation for QauntilesSortingDigraphs.
        """
        from decimal import Decimal
        cC = self.computeCategoryContents()
        
        if Descending:
            cCKeys = self.orderedCategoryKeys(Reverse = True)
        else:
            cCKeys = self.orderedCategoryKeys(Reverse = False)
        n = len(cC)
        n2 = n//2
        ordering = []
        
        for i in range(n2):
            if i == 0:
                x = cC[cCKeys[i]]
                y = cC[cCKeys[n-i-1]]
                setx = set(x)
                sety = set(y) - setx
            else:
                x = list(set(cC[cCKeys[i]]) - (setx | sety))
                setx = setx | set(x)
                y = list(set(cC[cCKeys[n-i-1]]) - (setx | sety))
                sety = sety | set(y)
            if x != [] or y != []:
                ordering.append( ( (Decimal(str(i+1)),x),(Decimal(str(n-i)),y) ) )
        if 2*n2 < n:
            if n2 == 0:
                x = cC[cCKeys[n2]]
            else:
                x = list(set(cC[cCKeys[n2]]) - (setx | sety))
            ordering.append( ( (Decimal(str(n2+1)),x),(Decimal(str(n2+1)),x) ) )

##        orderingList = []
##        for i in range(n2):
##            x = ordering[i][0][1]
##            if x != []:
##                orderingList.append(x)
##        if 2*n2 < n:
##            x = ordering[i][0][1]
##            y = ordering[i][1][1]
##            if x != []:
##                orderingList.append(x)
##            if y != []:
##                orderingList.append(y)
##        for i in range(n2):
##            y = ordering[n2-i-1][1][1]
##            if y != []:
##                orderingList.append(y)
##            
        
        weakOrdering = {'result':ordering}

        WeakOrder.showWeakOrder(self,weakOrdering)

##        return orderingList

##    def computeWeakOrder(self,Descending=True):
##        """
##        Specialisation for QauntilesSortingDigraphs.
##        """
##        from decimal import Decimal
##        cC = self.computeCategoryContents()
##        
##        if Descending:
##            cCKeys = self.orderedCategoryKeys(Reverse = True)
##        else:
##            cCKeys = self.orderedCategoryKeys(Reverse = False)
##        n = len(cC)
##        n2 = n//2
##        ordering = []
##        
##        for i in range(n2):
##            if i == 0:
##                x = cC[cCKeys[i]]
##                y = cC[cCKeys[n-i-1]]
##                setx = set(x)
##                sety = set(y) - setx
##            else:
##                x = list(set(cC[cCKeys[i]]) - (setx | sety))
##                setx = setx | set(x)
##                y = list(set(cC[cCKeys[n-i-1]]) - (setx | sety))
##                sety = sety | set(y)
##            if x != [] or y != []:
##                ordering.append( ( (Decimal(str(i+1)),x),(Decimal(str(n-i)),y) ) )
##        if 2*n2 < n:
##            if n2 == 0:
##                x = cC[cCKeys[n2]]
##            else:
##                x = list(set(cC[cCKeys[n2]]) - (setx | sety))
##            ordering.append( ( (Decimal(str(n2+1)),x),(Decimal(str(n2+1)),x) ) )
##
##        #print(ordering)
##        
##        orderingList = []
##        n = len(ordering)
##        for i in range(n):
##            x = ordering[i][0][1]
##            if x != []:
##                orderingList.append(x)
##        for i in range(n):
##            y = ordering[n-i-1][1][1]
##            if y != []:
##                orderingList.append(y)
####            
####        
####        weakOrdering = {'result':ordering}
####
####        WeakOrder.showWeakOrder(self,weakOrdering)
##
##        return orderingList
##
##    def showOrderedRelationTable(self,direction="decreasing"):
##        """
##        Showing the relation table in decreasing (default) or increasing order.
##        """
##        if direction == "decreasing":
##            Descending = True
##        else:
##            Descending = False
##
##        weakOrdering = self.computeWeakOrder(Descending)
##        
##        actionsList = []
##        for eq in weakOrdering:
##            #print(eq)
##            eq.sort()
##            for x in eq:
##                actionsList.append(x)
##        if len(actionsList) != len(self.actions):
##            print('Error !: missing action(s) %s in ordered table.')
##            
##        Digraph.showRelationTable(self,actionsSubset=actionsList,\
##                                relation=self.relation,\
##                                Sorted=False,\
##                                ReflexiveTerms=False)
        

    def _computeQuantiles(self,x,Debug=True):
        """
        renders the limiting quantiles
        """
        from math import floor
        if isinstance(x,int):
            n = x
        elif x == None:
            n = 4
        elif x == 'bitiles':
            n = 2
        elif x == 'tritiles':
            n = 3
        elif x == 'quartiles':
            n = 4
        elif x == 'quintiles':
            n = 5
        elif x == 'sextiles':
            n = 6
        elif x == 'septiles':
            n = 7
        elif x == 'octiles':
            n = 8
        elif x == 'deciles':
            n = 10
        elif x == 'dodeciles':
            n = 20
        elif x == 'centiles':
            n = 100
        elif x == 'automatic':
            pth = [5]
            for g in self.criteria:
                try:
                    pref = self.criteria[g]['thresholds']['ind'][0] + \
                           (self.criteria[g]['thresholds']['ind'][1]*Decimal('100'))
                    pth.append(pref)
                except:
                    pass
            amp = max(Decimal('1'),min(pth))
            n = int(floor(Decimal('100')/amp))
            if Debug:
                print('Detected preference thresholds = ',pth)
                print('amplitude, n',amp,n)

        limitingQuantiles = []
        for i in range(n+1):
            limitingQuantiles.append( Decimal(str(i)) / Decimal(str(n)) )
        self.name = 'sorting_with_%d-tile_limits' % n
        return limitingQuantiles
                                         
    def _computeLimitingQuantiles(self,g,Debug=True,PrefThresholds=True):
        """
        Renders the list of limiting quantiles on criteria g
        """
        from math import floor
        from copy import deepcopy
        gValues = []
        for x in self.actionsOrig:
            if Debug:
                print('g,x,evaluation[g][x]',g,x,self.evaluation[g][x])
            if self.evaluation[g][x] != Decimal('-999'):
                gValues.append(self.evaluation[g][x])
        gValues.sort()
        if PrefThresholds:
            try:
                gPrefThrCst = self.criteria[g]['thresholds']['pref'][0]
                gPrefThrSlope = self.criteria[g]['thresholds']['pref'][1]
            except:
                gPrefThrCst = Decimal('0')
                gPrefThrSlope = Decimal('0')            
        n = len(gValues)
        if Debug:
            print('g,n,gValues',g,n,gValues)
        nf = Decimal(str(n+1))
        limitingQuantiles = deepcopy(self.limitingQuantiles)
        limitingQuantiles.sort()
        if Debug:
            print(limitingQuantiles)
        LowerClosed = self.criteriaCategoryLimits['lowerClosed']
        if LowerClosed:
            limitingQuantiles = limitingQuantiles[:-1]
        else:
            limitingQuantiles = limitingQuantiles[1:]
        if Debug:
            print(limitingQuantiles)
        # computing the quantiles on criterion g
        gQuantiles = []
        if LowerClosed:
            # we ignore the 1.00 quantile and replace it with +infty
            for q in self.limitingQuantiles:
                r = (nf * q)
                rq = int(floor(r))
                if Debug:
                    print('r,rq',r,rq, end=' ')
                if rq < (n-1):
                    quantile = gValues[rq] + ((r-rq)*(gValues[rq+1]-gValues[rq]))
                    if rq > 0 and PrefThresholds:
                        quantile += gPrefThrCst + quantile*gPrefThrSlope
                else :
                    if self.criteria[g]['preferenceDirection'] == 'min':
                        quantile = Decimal('100.0')
                    else:
                        quantile = Decimal('200.0')
                if Debug:
                    print('quantile',quantile)
                gQuantiles.append(quantile)               

        else:  # upper closed categories
            # we ignore the quantile 0.0 and replace it with -\infty            
            for q in self.limitingQuantiles:
                r = (nf * q)
                rq = int(floor(r))
                if Debug:
                    print('r,rq',r,rq, end=' ')
                if rq == 0:
                    if self.criteria[g]['preferenceDirection'] == 'min':
                        quantile = Decimal('-200.0')
                    else:
                        quantile = Decimal('-100.0')
                elif rq < (n-1):
                    quantile = gValues[rq]\
                               + ((r-rq)*(gValues[rq+1]-gValues[rq]))
                    if PrefThresholds:
                        quantile -= gPrefThrCst - quantile*gPrefThrSlope
                else:
                    quantile = gValues[n-1]
                if Debug:
                    print('quantile',quantile)
                gQuantiles.append(quantile)
        if Debug:
            print(g,LowerClosed,self.criteria[g]['preferenceDirection'],gQuantiles)
        return gQuantiles
                
    def showSorting(self,Reverse=True,isReturningHTML=False,Debug=False):
        """
        Shows sorting results in decreasing or increasing (Reverse=False)
        order of the categories. If isReturningHTML is True (default = False)
        the method returns a htlm table with the sorting result.
        
        """
        #from string import replace
        from copy import deepcopy
        categoryContent = self.computeCategoryContents()
        categoryKeys = self.orderedCategoryKeys(Reverse=Reverse)
        try:
            lowerClosed = self.criteriaCategoryLimits['lowerClosed']
        except:
            lowerClosed = True
        if Reverse:
            print('\n*--- Sorting results in descending order ---*\n')
            if isReturningHTML:
                html = '<h2>Sorting results in descending order</h2>'
                html += '<table style="background-color:White;" border="1"><tr bgcolor="#9acd32"><th>Categories</th><th>Assorting</th></tr>'
        else:
            print('\n*--- Sorting results in ascending order ---*\n')
            if isReturningHTML:
                html = '<h2>Sorting results in ascending order</h2>'
                html += '<table style="background-color:White;" border="1"><tr bgcolor="#9acd32"><th>Categories</th><th>Assorting</th></tr>'
##        if lowerClosed:
##            #print('Lower closed categories')
##        else:
##            #print('Upper closed categories')
        for c in categoryKeys:
            print('%s:' % (self.categories[c]['name']), end=' ')
            print('\t',categoryContent[c])
            if isReturningHTML:
                #html += '<tr><td bgcolor="#FFF79B">[%s - %s[</td>' % (limprevc,limc)
                html += '<tr><td bgcolor="#FFF79B">%</td>' % (self.categories[c]['name'])
                catString = str(categoryContent[c])
                html += '<td>%s</td></tr>' % catString.replace('\'','&apos;')
##            if lowerClosed:
##                print('Lower closed categories')
##            else:
##                print('Upper closed categories')
##            for c in categoryKeys:
##                print('%s:' % (self.categories[c]['name']), end=' ')
##                print('\t',categoryContent[c])
##                if isReturningHTML:
##                    #html += '<tr><td bgcolor="#FFF79B">[%s - %s[</td>' % (limprevc,limc)
##                    html += '<tr><td bgcolor="#FFF79B">%</td>' % (self.categories[c]['name'])
##                    catString = str(categoryContent[c])
##                    html += '<td>%s</td></tr>' % catString.replace('\'','&apos;')

        if isReturningHTML:
            html += '</table>'
            return html

    def computeSortingRelation(self,categoryContents=None,Debug=False):
        """
        constructs a bipolar sorting relation using the category contents.
        """
        if categoryContents == None:
            categoryContents = self.computeCategoryContents()
        categoryKeys = self.orderedCategoryKeys()
        Max = self.valuationdomain['max']
        Med = self.valuationdomain['med']
        Min = self.valuationdomain['min']
        actions = [x for x in self.actionsOrig]
        currActions = set(actions)
        relation = self.relation
#        relation = {}
        sortingRelation = {}
        for x in actions:
#            relation[x] = {}
            sortingRelation[x] = {}
            for y in actions:
#                if x != y:
#                    relation[x][y] = Max
#                else:
#                    relation[x][y] = Med
                sortingRelation[x][y] = Med
                
        if Debug:
            print('categoryContents',categoryContents)
        for i in categoryKeys:
            ibch = set(categoryContents[i])
            ribch = set(currActions) - ibch
            if Debug:
                print('ibch,ribch',ibch,ribch)
            for x in ibch:
                for y in ibch:
##                    sortingRelation[x][y] = self.omin( [abs(relation[x][y]),abs(relation[y][x])] )
##                    sortingRelation[y][x] = self.omin( [abs(relation[y][x]),abs(relation[x][y])] )
                    sortingRelation[x][y] = Med
                    sortingRelation[y][x] = Med
                for y in ribch:
##                    sortingRelation[x][y] = -self.omin( [abs(relation[x][y]),abs(relation[y][x])] )
##                    sortingRelation[y][x] = self.omin( [abs(relation[y][x]),abs(relation[x][y])] )
                    sortingRelation[x][y] = Min
                    sortingRelation[y][x] = Max
            currActions = currActions - ibch
        return sortingRelation

    def showActionCategories(self,action,Debug=False,Comments=True):
        """
        Renders the union of categories in which the given action is sorted positively or null into.
        Returns a tuple : action, lowest category key, highest category key, membership credibility !
        """
        Med = self.valuationdomain['med']
        sorting = self.computeSortingCharacteristics(action=action,Comments=Debug)
        keys = []
        for c in self.orderedCategoryKeys():
            if sorting[action][c]['categoryMembership'] >= Med:
                if sorting[action][c]['lowLimit'] > Med:
                    lowLimit = sorting[action][c]['lowLimit']
                if sorting[action][c]['notHighLimit'] > Med:
                    notHighLimit = sorting[action][c]['notHighLimit']
                keys.append(c)
                if Debug:
                    print(action, c, sorting[action][c])
        n = len(keys)
        credibility = min(lowLimit,notHighLimit)
        if n == 0:
            return None
        elif n == 1:
            if Comments:
                print('%s in %s - %s with credibility: %.2f' % (action,\
                                     self.categories[keys[0]]['lowLimit'],\
                                     self.categories[keys[0]]['highLimit'],\
                                     credibility) )
            return action,\
                    keys[0],\
                    keys[0],\
                    credibility
        else:
            if Comments:
                print('%s in %s - %s with credibility: %.2f' % (action,\
                                     self.categories[keys[0]]['lowLimit'],\
                                     self.categories[keys[-1]]['highLimit'],\
                                     credibility) )
            return action,\
                    keys[0],\
                    keys[-1],\
                    credibility            

    def showActionsSortingResult(self,actionSubset=None):
        """
        shows the quantiles sorting result all (default) of a subset of the decision actions.
        """
        if actionSubset == None:
            actions = [x for x in self.actions]
        else:
            actions = [x for x in actionSubset]
        actions.sort()
        print('Quantiles sorting result per decision action')
        for x in actions:
            self.showActionCategories(x)

class OptimalHarmonicQuantilesSortingDigraph(QuantilesSortingDigraph):
    """
    Specialisation of the QuantilesSortingDigraph Class
    for optimal sorting of alternatives into
    quantiles delimited ordered classes.
    """
    def __init__(self,argPerfTab=None,
                 minQuantiles=4,
                 maxQuantiles=200,
                 LowerClosed=True,
                 PrefThresholds=True,
                 hasNoVeto=False,
                 minValuation=-100.0,
                 maxValuation=100.0,
                 outrankingType = "bipolar",
                 Threading=False,
                 Debug=False):
        
        from copy import deepcopy
        if argPerfTab != None:
            t = argPerfTab
        else:
            t = RandomCBPerformanceTableau()
        g = BipolarOutrankingDigraph(t)
        maxCorr = {'correlation': Decimal('-1.0')}
        maxCorr['determination'] = Decimal('0.0')
        qs = None
        nbrActions = len(t.actions)
        nq = nbrActions+1
        divNbrActions = []
        for i in range(minQuantiles,nq):
            if (nbrActions%i) == 0:
                divNbrActions.append(i)
        if Debug:
            print(divNbrActions)
        testNQ = [(i+1) for i in divNbrActions]
        for m in range(2,10):
            if m*nbrActions < maxQuantiles:
                testNQ.append((m*nbrActions)+1)
        if Debug:
            print(testNQ)
        for nq in testNQ:
            if Debug:
                print( '%d-tiling' % (nq) )
            qs0 = QuantilesSortingDigraph(t,limitingQuantiles=nq,Threading=False)
            qs0Corr = g.computeOrdinalCorrelation(qs0)
            if Debug:
                print( 'correlation0 = %.3f' % qs0Corr['correlation'] )
            if qs0Corr['correlation']*qs0Corr['determination'] > maxCorr['correlation']*maxCorr['determination']:
    #        if qs0Corr['correlation'] > maxCorr['correlation']:
                maxqs = deepcopy(qs0)
            
        self.name = deepcopy(maxqs.name)
        self.actions = deepcopy(maxqs.actions)
        self.actionsOrig = deepcopy(maxqs.actionsOrig)
        self.order = len(self.actions)
        self.criteria = deepcopy(maxqs.criteria)
        self.evaluation = deepcopy(maxqs.evaluation)
        self.profiles = deepcopy(maxqs.profiles)
        self.valuationdomain = deepcopy(maxqs.valuationdomain)
        self.relation = deepcopy(maxqs.relation)
        self.categories = deepcopy(maxqs.categories)
        self.criteriaCategoryLimits = deepcopy(maxqs.criteriaCategoryLimits)
        self.limitingQuantiles = deepcopy(maxqs.limitingQuantiles)
        self.gamma = self.gammaSets()
        self.notGamma = self.notGammaSets()
        
        return None

           
#----------test SortingDigraph class ----------------
if __name__ == "__main__":
    from time import time
    from perfTabs import *
    from outrankingDigraphs import *
    from sortingDigraphs import *
    print("""
    ****************************************************
    * Python sortingDigraphs module                    *
    * depends on BipolarOutrankingDigraph and          *
    * $Revision$                                 *
    * Copyright (C) 2010 Raymond Bisdorff              *
    * The module comes with ABSOLUTELY NO WARRANTY     *
    * to the extent permitted by the applicable law.   *
    * This is free software, and you are welcome to    *
    * redistribute it if it remains free software.     *
    ****************************************************
    """)

    print('*-------- Testing class and methods -------')

    #t = XMCDA2PerformanceTableau('uniSorting')
    #t = XMCDA2PerformanceTableau('spiegel2004')
    t = RandomCBPerformanceTableau(numberOfActions=20,
                                   numberOfCriteria=13,
                                   weightDistribution='equiobjectives')
    qsh = OptimalHarmonicQuantilesSortingDigraph(t,
                                  LowerClosed=True,
                                  PrefThresholds=False,
                                  Threading=True,
                                  Debug=False)
    qsh.showSorting()
    qsh.exportGraphViz(graphType="pdf")
    #qsh.showCriteriaCategoryLimits()
##    t = RandomCBPerformanceTableau(numberOfActions=7,numberOfCriteria=7)
##    t.saveXMCDA2('test')
##    t.showPerformanceTableau()
##    t = XMCDA2PerformanceTableau('test')
    #t.showCriteria()
    #g = BipolarOutrankingDigraph(t)
    #t = PerformanceTableau('ex1perftab')
    #t.showQuantileSort()
    #s = SortingDigraph(t,lowerClosed=False)
    #s.showSorting()
    #s.showSortingCharacteristics('a10')
##    t0 = time()
##    qs0 = QuantilesSortingDigraph(t,limitingQuantiles=nq,
##                                  LowerClosed=True,
##                                  PrefThresholds=False,
##                                  Threading=True,
##                                  Debug=False)
##    t1 = time()-t0
##    t2 = time()
##    qs1 = QuantilesSortingDigraph(t,limitingQuantiles=nq,
##                                  LowerClosed=True,
##                                  PrefThresholds=False,
##                                  Threading=False)
##    t3 = time()-t2
##    qs0.showSorting()
##    qs1.showSorting()
##    print('With and without threading: %s, %s' % (str(t1),str(t3)) )
    
##    t0 = time()
##    s0 = SortingDigraph(t,Threading=True,Debug=False)
##    t1 = time()-t0
##    #s0.showSorting()
##    t2 = time()
##    s1 = SortingDigraph(t,Threading=False)
##    t3 = time()-t2
##    s1.showSorting()
##    print('With and without threading: %s, %s' % (str(t1),str(t3)) )
        

    

    print('*------------------*')
    print('If you see this line all tests were passed successfully :-)')
    print('Enjoy !')

    print('*************************************')
    print('* R.B. december 2010                *')
    print('* $Revision$                  *')
    print('*************************************')

#############################
# Log record for changes:
# $Log: sortingDigraphs.py,v $
#############################
