# Saved performance Tableau: 
from decimal import Decimal
from collections import OrderedDict
actions = OrderedDict([
('a1', {
'name': 'random cheap decision action',
'type': 'cheap',
'shortName': 'a1c',
'comment': 'RandomCBPerformanceTableau() generated.',
}),
('a2', {
'name': 'random neutral decision action',
'type': 'neutral',
'shortName': 'a2n',
'comment': 'RandomCBPerformanceTableau() generated.',
}),
('a3', {
'name': 'random neutral decision action',
'type': 'neutral',
'shortName': 'a3n',
'comment': 'RandomCBPerformanceTableau() generated.',
}),
('a4', {
'name': 'random cheap decision action',
'type': 'cheap',
'shortName': 'a4c',
'comment': 'RandomCBPerformanceTableau() generated.',
}),
('a5', {
'name': 'random advantageous decision action',
'type': 'advantageous',
'shortName': 'a5a',
'comment': 'RandomCBPerformanceTableau() generated.',
}),
('a6', {
'name': 'random neutral decision action',
'type': 'neutral',
'shortName': 'a6n',
'comment': 'RandomCBPerformanceTableau() generated.',
}),
('a7', {
'name': 'random advantageous decision action',
'type': 'advantageous',
'shortName': 'a7a',
'comment': 'RandomCBPerformanceTableau() generated.',
}),
])
objectives = OrderedDict([
('C', {
'criteria': ['c1', 'c2'],
'weight': Decimal('6'),
'name': 'Costs',
}),
('B', {
'criteria': ['b1', 'b2', 'b3'],
'weight': Decimal('6'),
'name': 'Benefits',
}),
])
criteria = OrderedDict([
('b1', {
'scale': (0, 10),
'weight': Decimal('2'),
'objective': 'B',
'name': 'random ordinal benefit criterion',
'randomMode': ['triangular', 5.0, 0.5],
'comment': 'Evaluation generator: triangular law with variable mode (m) and probability repartition (p = 0.5). Cheap actions: m = 30%; neutral actions: m = 50%; advantageous actions: m = 70%.',
'shortName': 'b1',
'preferenceDirection': 'max',
'scaleType': 'ordinal',
'thresholds': OrderedDict(),
}),
('c1', {
'scale': (0.0, 100.0),
'weight': Decimal('3'),
'objective': 'C',
'name': 'random cardinal cost criterion',
'randomMode': ['triangular', 50.0, 0.5],
'comment': 'Evaluation generator: triangular law with variable mode (m) and probability repartition (p = 0.5). Cheap actions: m = 30%; neutral actions: m = 50%; advantageous actions: m = 70%.',
'shortName': 'c1',
'preferenceDirection': 'min',
'scaleType': 'cardinal',
'thresholds': OrderedDict([('pref', (Decimal('0.76'), Decimal('0'))), ('veto', (Decimal('73.23642083868727'), Decimal('0'))), ('ind', (Decimal('1.6989199490956892'), Decimal('0')))]),
}),
('c2', {
'scale': (0.0, 100.0),
'weight': Decimal('3'),
'objective': 'C',
'name': 'random cardinal cost criterion',
'randomMode': ['triangular', 50.0, 0.5],
'comment': 'Evaluation generator: triangular law with variable mode (m) and probability repartition (p = 0.5). Cheap actions: m = 30%; neutral actions: m = 50%; advantageous actions: m = 70%.',
'shortName': 'c2',
'preferenceDirection': 'min',
'scaleType': 'cardinal',
'thresholds': OrderedDict([('pref', (Decimal('0.76'), Decimal('0'))), ('veto', (Decimal('67.58835374864057'), Decimal('0'))), ('ind', (Decimal('4.88234269360999'), Decimal('0')))]),
}),
('b2', {
'scale': (0.0, 100.0),
'weight': Decimal('2'),
'objective': 'B',
'name': 'random cardinal benefit criterion',
'randomMode': ['triangular', 50.0, 0.5],
'comment': 'Evaluation generator: triangular law with variable mode (m) and probability repartition (p = 0.5). Cheap actions: m = 30%; neutral actions: m = 50%; advantageous actions: m = 70%.',
'shortName': 'b2',
'preferenceDirection': 'max',
'scaleType': 'cardinal',
'thresholds': OrderedDict([('pref', (Decimal('0.76'), Decimal('0'))), ('veto', (Decimal('60.85515819598158'), Decimal('0'))), ('ind', (Decimal('5.126931130770137'), Decimal('0')))]),
}),
('b3', {
'scale': (0, 10),
'weight': Decimal('2'),
'objective': 'B',
'name': 'random ordinal benefit criterion',
'randomMode': ['triangular', 5.0, 0.5],
'comment': 'Evaluation generator: triangular law with variable mode (m) and probability repartition (p = 0.5). Cheap actions: m = 30%; neutral actions: m = 50%; advantageous actions: m = 70%.',
'shortName': 'b3',
'preferenceDirection': 'max',
'scaleType': 'ordinal',
'thresholds': OrderedDict(),
}),
])
evaluation = {
'b1': {
'a1':Decimal("1.00"),
'a2':Decimal("8.00"),
'a3':Decimal("8.00"),
'a4':Decimal("2.00"),
'a5':Decimal("6.00"),
'a6':Decimal("7.00"),
'a7':Decimal("4.00"),
},
'c1': {
'a1':Decimal("-17.92"),
'a2':Decimal("-30.71"),
'a3':Decimal("-41.65"),
'a4':Decimal("-39.49"),
'a5':Decimal("-91.87"),
'a6':Decimal("-32.47"),
'a7':Decimal("-91.11"),
},
'c2': {
'a1':Decimal("-33.99"),
'a2':Decimal("-77.77"),
'a3':Decimal("-69.84"),
'a4':Decimal("-16.99"),
'a5':Decimal("-74.85"),
'a6':Decimal("-24.91"),
'a7':Decimal("-7.44"),
},
'b2': {
'a1':Decimal("26.68"),
'a2':Decimal("66.35"),
'a3':Decimal("53.43"),
'a4':Decimal("18.62"),
'a5':Decimal("83.09"),
'a6':Decimal("79.24"),
'a7':Decimal("48.22"),
},
'b3': {
'a1':Decimal("3.00"),
'a2':Decimal("6.00"),
'a3':Decimal("8.00"),
'a4':Decimal("2.00"),
'a5':Decimal("7.00"),
'a6':Decimal("9.00"),
'a7':Decimal("7.00"),
},
}
