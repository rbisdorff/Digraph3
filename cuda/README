#--------------------------------------------------------------------------
# Python3 CUDA test implementation of the Digraph3 cIntegerOutrankingDigrah class
# Current revision Py312
# Copyright (C) 2024 Raymond Bisdorff
#
#    This resource is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This software is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#-----------------------------------------------------------------------------

This Digraph3 module experiments the use of NVIDIA GPU resources for measuring the speeding up of the element wise computation of the dual, converse and codual transforms and the fusion operation for large (order >= 10000) cIntegerOurankingDigraphs.IntegerBipolarOutrankingDigraph objects. 

For small (order = +-1000) such outranking digraphs, a Cuda supported computation of NetFlows and Copeland rankings is provided. For this purpose, the relation attribute, a double dictionary, is replaced with a numpy two dimensional int32 array. 

Test script of the module may be found in the scratch part at the end of the module source file. 
These were run with a Geforce PTX1650 and Python 3.11.6 on Ubuntu 23.10. 

Requirements: NVIDIA GPU device nvidia driver 535 enabled and pip install of numpy and numba

Note: The usual double dictionary *self.relation* attribute of the bipolar-valued digraph is replaced here with a *self.valuation* attribute, a numpy array[self.order,self.order] of dtype int64 containing the pairwise integer relation characteristic values.

Enjoy !!
R Bisdorff
http://rbisdorff.github.io/
